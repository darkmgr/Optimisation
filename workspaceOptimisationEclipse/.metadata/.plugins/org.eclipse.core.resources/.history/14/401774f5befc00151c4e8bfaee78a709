package managers;

import java.util.Vector;

import object.Equipe;
import object.Poule;

public class ObjectManager {

	private static Vector<Equipe> mesEquipes;
	private static Vector<Poule> mesPoules;
	
	public ObjectManager() {
		ObjectManager.setMesEquipes(new Vector<Equipe>());
		ObjectManager.setMesPoules(new Vector<Poule>());
	}
	
	public static void addEquipe(Equipe eTemp) {
		if(eTemp != null) {
			if(!ObjectManager.existEquipeWithName(eTemp.getName())) {
				ObjectManager.getMesEquipes().add(eTemp);
				//System.out.println("Ajout de l'équipe "+eTemp.getName()+" au Manager");
			} else {
				//System.out.println("Impossible d'ajouter l'équipe "+eTemp.getName()+" déjà existante");
			}
		} else {
			System.out.println("Impossible d'ajouter une équipe null");
		}
	}
	
	public static void deleteEquipe(Equipe eTemp) {
		if(eTemp != null) {
			for(Equipe e : ObjectManager.getMesEquipes()) {
				if(e.equals(eTemp)) {
					ObjectManager.getMesEquipes().remove(e);
					System.out.println("Equipe correctement supprimée");
				}
			}
		} else {
			System.out.println("Impossible de supprimer une équipe null");
		}
	}
	
	public static boolean existEquipeWithName(String name) {
		boolean res = false;
		for(Equipe e : ObjectManager.getMesEquipes()) {
			if(e.getName().equals(name)) {
				res = true;
			}
		}
		return res;
	}
	
	public static void resetBooleanUsedPoule() {
		
	}
	
	public static void addPoule(Poule pTemp) {
		if(pTemp != null) {
			ObjectManager.getMesPoules().add(pTemp);
			System.out.println("Ajout de la poule au Manager");
		} else {
			System.out.println("Impossible d'ajouter une poule null");
		}
	}
	
	public static void deletePoule(Poule pTemp) {
		if(pTemp != null) {
			for(Poule p : ObjectManager.getMesPoules()) {
				if(p.equals(pTemp)) {
					ObjectManager.getMesEquipes().remove(p);
					System.out.println("Poule correctement supprimée");
				}
			}
		} else {
			System.out.println("Impossible de supprimer une poule null");
		}
	}

	/**
	 * @return the mesEquipes
	 */
	public static Vector<Equipe> getMesEquipes() {
		return mesEquipes;
	}

	/**
	 * @param mesEquipes the mesEquipes to set
	 */
	public static void setMesEquipes(Vector<Equipe> mesEquipes) {
		ObjectManager.mesEquipes = mesEquipes;
	}

	/**
	 * @return the mesPoules
	 */
	public static Vector<Poule> getMesPoules() {
		return mesPoules;
	}

	/**
	 * @param mesPoules the mesPoules to set
	 */
	public static void setMesPoules(Vector<Poule> mesPoules) {
		ObjectManager.mesPoules = mesPoules;
	}
}
