package tools;

import java.io.File;
import java.io.FileInputStream;
import java.util.Iterator;
import java.util.Vector;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import managers.ObjectManager;
import object.Equipe;
import object.Poule;

public class ExcelReader {
	private static Vector<String> pathFiles;
	
	public ExcelReader() {
		ExcelReader.setPathFiles(new Vector<String>());
	}

	public static void getEquipeFromExcelFile() {
		if(!ExcelReader.getPathFiles().isEmpty()) {
			try {
				for(String files : ExcelReader.getPathFiles()) {
					FileInputStream inputStream = new FileInputStream(new File(files));
					Workbook workbook = new XSSFWorkbook(inputStream);
			        Sheet timeSheet = workbook.getSheetAt(0);
			        Sheet distanceSheet = workbook.getSheetAt(1);
			        Sheet levelSheet = workbook.getSheetAt(2);
			        Iterator<Row> iteratorTime = timeSheet.iterator();
			        Iterator<Row> iteratorDistance = distanceSheet.iterator();
			        Iterator<Row> iteratorLevel = levelSheet.iterator();
			         
			        //Récupération de la matrice de Temps (feuille 1)
			        while (iteratorTime.hasNext()) {
			        	Row nextRow = iteratorTime.next();
			        	
			        	// Première ligne = liste des noms des équipes
			        	if(nextRow.getRowNum() == 0) {			        		
			        		Iterator<Cell> cellIterator = nextRow.cellIterator();

				            while (cellIterator.hasNext()) {
				                Cell cell = cellIterator.next();
				                
				                if(cell.getColumnIndex() < (Poule.getMax_size()+1)*2) {
				                	switch (cell.getCellType()) {
				                    	case Cell.CELL_TYPE_STRING:
				                    		ObjectManager.addEquipe(new Equipe(cell.getStringCellValue(), cell.getColumnIndex()));
				                    		break;
				                	}
				                }
				            }
			        	} else {
			        		String name_equipe = "";
			        		Vector<Double> matrice = new Vector<Double>();
				            Iterator<Cell> cellIterator = nextRow.cellIterator();				     
				            
				            while (cellIterator.hasNext()) {
				                Cell cell = cellIterator.next();
				                
				                if(cell.getColumnIndex() < (Poule.getMax_size()+1)*2) {
					                switch (cell.getCellType()) {
					                	case Cell.CELL_TYPE_STRING:
					                		name_equipe = cell.getStringCellValue();
					                		break;
					                    case Cell.CELL_TYPE_NUMERIC:
					                    	matrice.add(cell.getNumericCellValue());
					                        break;
					                }
				                }
				            }
				            
				            for(Equipe e : ObjectManager.getMesEquipes()) {
				            	if(e.getName().equals(name_equipe)) {
				            			e.setMatriceTemps(matrice);
				            	}
				            }
			        	}
			        }
			        
			        //Récupération de la matrice de Distance (feuille 2)
			        while (iteratorDistance.hasNext()) {
			        	Row nextRow = iteratorDistance.next();
			        	
			        	// Première ligne = liste des noms des équipes
			        	if(nextRow.getRowNum() == 0) {			        		
			        		Iterator<Cell> cellIterator = nextRow.cellIterator();
				             
				            while (cellIterator.hasNext()) {
				                Cell cell = cellIterator.next();
				                
				                if(cell.getColumnIndex() < (Poule.getMax_size()+1)*2) {
					                switch (cell.getCellType()) {
					                    case Cell.CELL_TYPE_STRING:
					                        ObjectManager.addEquipe(new Equipe(cell.getStringCellValue(), cell.getColumnIndex()));
					                        break;
					                }
				                }
				            }
			        	} else {
			        		String name_equipe = "";
			        		Vector<Double> matrice = new Vector<Double>();
				            Iterator<Cell> cellIterator = nextRow.cellIterator();				     
				            
				            while (cellIterator.hasNext()) {
				                Cell cell = cellIterator.next();
				                
				                if(cell.getColumnIndex() < (Poule.getMax_size()+1)*2) {
					                switch (cell.getCellType()) {
					                	case Cell.CELL_TYPE_STRING:
					                		name_equipe = cell.getStringCellValue();
					                		break;
					                    case Cell.CELL_TYPE_NUMERIC:
					                    	matrice.add(cell.getNumericCellValue());
					                        break;
					                }
				                }
				            }
				            
				            for(Equipe e : ObjectManager.getMesEquipes()) {
				            	if(e.getName().equals(name_equipe)) {
				            			e.setMatriceDistance(matrice);
				            	}
				            }
			        	}
			        }
			        
			        //Récupération du niveau de chaque équipe (feuille 3)
			        while (iteratorLevel.hasNext()) {
			        	Row nextRow = iteratorLevel.next();
			        	
		        		String name_equipe = "";
		        		double niveau = 0.0;
			            Iterator<Cell> cellIterator = nextRow.cellIterator();				     
			            
			            while (cellIterator.hasNext()) {
			                Cell cell = cellIterator.next();
			                
			                if(cell.getColumnIndex() < (Poule.getMax_size()+1)*2) {
			                switch (cell.getCellType()) {
			                	case Cell.CELL_TYPE_STRING:
			                		name_equipe = cell.getStringCellValue();
			                		break;
			                    case Cell.CELL_TYPE_NUMERIC:
			                    	niveau = cell.getNumericCellValue();
			                    	for(Equipe e : ObjectManager.getMesEquipes()) {
						            	if(e.getName().contains(name_equipe)) {
						            		e.setNiveau(niveau);
						            	}
						            }
			                        break;
			                }
			                }
			            }
			        }			
			        
			         
			        workbook.close();
			        inputStream.close();
				}
			} catch(Exception ex) {
				System.out.println("Erreur dans l'ExcelReader.getEquipeFromExcelFile() : " + ex.toString());
				ex.printStackTrace();
			}
		} else {
			System.out.println("Vous n'avez renseigné aucun fichier Excel");
		}
	}
	
	/**
	 * @return the pathFiles
	 */
	public static Vector<String> getPathFiles() {
		return pathFiles;
	}

	/**
	 * @param pathFiles the pathFiles to set
	 */
	public static void setPathFiles(Vector<String> pathFiles) {
		ExcelReader.pathFiles = pathFiles;
	}
}
