package main;

import java.util.Vector;

import managers.ObjectManager;
import managers.PopulationConstructor;
import object.Individu;
import object.Poule;
import tools.ConfigReader;
import tools.ExcelReader;

public class PouleConstructor {

	public static String version = "1.0";
	public static String collaborateur = "PERARDELLE Olivier, MULLER Jean-Francois";
	public static String logiciel = "PouleConstructor";
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println("Bienvenue dans le logiciel " + logiciel + " version " + version + " cree par " + collaborateur);
		init();
	}
	
	private static void init() {
		new ConfigReader();
		new ExcelReader();
		new ObjectManager();
		new PopulationConstructor();
		
		ConfigReader.setPathFile("./config.txt");
		ConfigReader.getConfigFromFile();
		
		if(ConfigReader.getConfig().get("TournoiStandard").equalsIgnoreCase("on") 
				&& ConfigReader.getConfig().get("TournoiComplexe").equalsIgnoreCase("on")){
			System.out.println("Erreur dans le fichier de configuration, impossible de creer deux types de tournois differents.");
		} else if (ConfigReader.getConfig().get("TournoiStandard").equalsIgnoreCase("off") 
				&& ConfigReader.getConfig().get("TournoiComplexe").equalsIgnoreCase("off")) {
			
		} else if(ConfigReader.getConfig().get("TournoiStandard").equalsIgnoreCase("on")) {
			
		} else if(ConfigReader.getConfig().get("TournoiComplexe").equalsIgnoreCase("on")) {
			
		}
		//TODO : tournois complexes
		//On indique la taille maximale du nombre d'equipe par Poule
		Poule.setMax_size(Integer.parseInt(ConfigReader.getConfig().get("nbEquipeParPoule")));
		
		Vector<String> filesPath = new Vector<String>();
		filesPath.add(ConfigReader.getConfig().get("pathMatrices"));
		
		ExcelReader.setPathFiles(filesPath);
		
		
		System.out.println("Critere de selection des equipes (Temps ou distance) : " + ConfigReader.getConfig().get("MethodeSelection"));
		System.out.println("Critere de changement (mutation ou croisement) : " + ConfigReader.getConfig().get("MethodeChangement"));
				
		System.out.println("Debut de l'initialisation des Equipes");
		ExcelReader.getEquipeFromExcelFile();
		System.out.println("Fin de l'initialisation des Equipes");
		
		/** DEBUT de l'algorithme genetique **/
		
		//Generation d'un individu aleatoire
		System.out.println("Debut de la generation initiale aleatoire des " + Integer.parseInt(ConfigReader.getConfig().get("nbIndividuAleatoireInitial")) + " Individus");
		PopulationConstructor.GenererNIndividuAleatoire(Integer.parseInt(ConfigReader.getConfig().get("nbIndividuAleatoireInitial")));
		System.out.println("Fin de la generation initiale aleatoire des Individus");

		
		if(ConfigReader.getConfig().get("MethodeChangement").equalsIgnoreCase("mutation")) {
			for(int q = 0; q < Integer.parseInt(ConfigReader.getConfig().get("nbGeneration")); q++) {
				//Mutation des individus
				System.out.println("======================\nDebut de la generation " + q);
				
				System.out.println("Debut de la mutation des Individus de la generation " + q);
				PopulationConstructor.MutationPopulation(Integer.parseInt(ConfigReader.getConfig().get("nbIndividuMute")), 
						Integer.parseInt(ConfigReader.getConfig().get("nbMaxAleatoireMutationParIndividu")));
				
				System.out.println("Fin de la mutation des Individus de la generation " + q);
				
				//Selection des meilleurs individus
				System.out.println("Debut de la selection des "+Integer.parseInt(ConfigReader.getConfig().get("nbSelectionMeilleurIndividuGeneration"))+" meilleurs Individus de la generation " + q);
				PopulationConstructor.SelectionNMeilleursIndividus(Integer.parseInt(ConfigReader.getConfig().get("nbSelectionMeilleurIndividuGeneration")));
				System.out.println("Fin de la selection des "+Integer.parseInt(ConfigReader.getConfig().get("nbSelectionMeilleurIndividuGeneration"))+" meilleurs Individus de la generation " + q);
				
				
				System.out.println("Fin de la generation " + q + "\n==========================");
			}
		} else if (ConfigReader.getConfig().get("MethodeChangement").equalsIgnoreCase("croisement")) {
			for(int q = 0; q < Integer.parseInt(ConfigReader.getConfig().get("nbGeneration")); q++) {
				//Croisement des individus
				System.out.println("======================\nDebut de la generation " + q);
				
				System.out.println("Debut du croisement des Individus de la generation " + q);
				PopulationConstructor.CroisementPopulation(Integer.parseInt(ConfigReader.getConfig().get("nbIndividuCroisement")));
				
				System.out.println("Fin du croisement des Individus de la generation " + q);
				
				//Selection des meilleurs individus
				System.out.println("Debut de la selection des "+Integer.parseInt(ConfigReader.getConfig().get("nbSelectionMeilleurIndividuGeneration"))+" meilleurs Individus de la generation " + q);
				PopulationConstructor.SelectionNMeilleursIndividus(Integer.parseInt(ConfigReader.getConfig().get("nbSelectionMeilleurIndividuGeneration")));
				System.out.println("Fin de la selection des "+Integer.parseInt(ConfigReader.getConfig().get("nbSelectionMeilleurIndividuGeneration"))+" meilleurs Individus de la generation " + q);
				
				
				System.out.println("Fin de la generation " + q + "\n==========================");
			}
		}
		
		System.out.println("-------------");
		System.out.println("-------------");
		System.out.println("Fin de l'algorithme genetique");
		
		System.out.println("Debut de la selection des "+Integer.parseInt(ConfigReader.getConfig().get("nbSelectionMeilleurIndividuFinal"))+" meilleurs Individus");
		PopulationConstructor.SelectionNMeilleursIndividus(Integer.parseInt(ConfigReader.getConfig().get("nbSelectionMeilleurIndividuFinal")));
		System.out.println("Fin de la selection des "+Integer.parseInt(ConfigReader.getConfig().get("nbSelectionMeilleurIndividuFinal"))+" meilleurs Individus");
		
		System.out.println("Individus selectionnes : ");
		for(Individu iTemp : ObjectManager.getMesIndividus()) {
			System.out.println(iTemp.toString(true));
		}
	}

}
